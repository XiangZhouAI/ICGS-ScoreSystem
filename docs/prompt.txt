üéØ Vibe Coding Prompt: Golf Competition Management and Scoring App

We are building a full-stack web application for golf competition management. The app will be used by organizers on laptops to manage player data, calculate scores, and display results on a connected 4K big screen.

The development process will follow a multi-role, iterative workflow:
	‚Ä¢	PM (Product Manager): clarifies requirements, prioritizes, sets acceptance criteria.
	‚Ä¢	UX Designer: creates wireframes, layouts, and visual guidelines.
	‚Ä¢	Developer (Frontend, Backend, Full-stack): implements features.
	‚Ä¢	QA: tests against requirements, raises questions, and requests adjustments.
	‚Ä¢	PM Sign-Off: confirms readiness before moving to the next cycle.

After each QA phase, the process must pause and ask questions before continuing to the next iteration.

‚∏ª

üìò Project Overview

Title: Golf Competition Management and Scoring Application
Objective: Streamline competition setup, scoring, and prize-giving with accurate calculations and a high-visibility results screen.

‚∏ª

‚öôÔ∏è Functional Requirements
	1.	Player & Handicap Management
	‚Ä¢	Preload player names and handicaps.
	‚Ä¢	Add, edit, or delete player information.
	2.	Course Configuration
	‚Ä¢	Input and save par + separate male/female stroke indexes for all 18 holes.
	‚Ä¢	Save configurations for reuse.
	3.	Dynamic Handicap Categories
	‚Ä¢	Automatically divide players into three roughly equal categories based on handicap.
	4.	Score Entry
	‚Ä¢	Organizer-friendly interface for quick stroke entry per hole.
	‚Ä¢	Accuracy and speed are top priorities.
	5.	Stableford Calculation
Updated scoring logic:
	‚Ä¢	-4 ‚Üí 6 pts
	‚Ä¢	-3 ‚Üí 5 pts
	‚Ä¢	-2 ‚Üí 4 pts
	‚Ä¢	-1 ‚Üí 3 pts
	‚Ä¢	Par ‚Üí 2 pts
	‚Ä¢	+1 ‚Üí 1 pt
	‚Ä¢	+2 or worse ‚Üí 0 pts
	6.	Rule-based Prize Engine
	‚Ä¢	Most birdies, most bogeys, most scratch holes.
	‚Ä¢	Lowest cumulative score on Par 3s.
	‚Ä¢	Best individual hole score.
	‚Ä¢	Extensible for new prize rules.
	7.	Data Management
	‚Ä¢	Export results to CSV.
	‚Ä¢	Generate PDF summary of competition results.

‚∏ª

üåê Non-Functional Requirements
	‚Ä¢	User Experience: Simple, organizer-first workflows.
	‚Ä¢	Performance: Instant calculations & display updates.
	‚Ä¢	Design & Aesthetics:
	‚Ä¢	Blue-based color palette (derived from society logo).
	‚Ä¢	Presentation screen optimized for 4K (3840x2160).
	‚Ä¢	Text must be legible from 4‚Äì10 meters away.
	‚Ä¢	Areas for society logo + up to 7 sponsor logos.
	‚Ä¢	Reliability: Stable, prevents data loss.
	‚Ä¢	Deployment: Runs locally on laptops (React + Node.js + MongoDB stack assumed).

‚∏ª

üõ†Ô∏è Vibe Coding Process (Iteration-based)

Phase 1: Product Management (PM) ‚úçÔ∏è
	‚Ä¢	Review PRD with stakeholders.
	‚Ä¢	Identify core flows:
	‚Ä¢	Player & Course Setup
	‚Ä¢	Score Entry
	‚Ä¢	Results Display
	‚Ä¢	Mark extended flows: Prize engine, CSV/PDF exports.
	‚Ä¢	Define acceptance criteria (e.g., Stableford calculation must be 100% correct, presentation must be clear on 4K).

Phase 2: UX Design üé®
	‚Ä¢	Create wireframes for:
	‚Ä¢	Player/Handicap Management (table/grid).
	‚Ä¢	Course Setup (18-hole input grid, male/female indexes).
	‚Ä¢	Scoring Entry (spreadsheet-like, fast keyboard entry).
	‚Ä¢	Results Presentation (large text, flexible logo slots).
	‚Ä¢	Apply blue-based palette inspired by society logo.

Phase 3: Development üíª
	‚Ä¢	Frontend (React): Build UI from UX mockups.
	‚Ä¢	Backend (Node + MongoDB):
	‚Ä¢	Player & course data storage.
	‚Ä¢	Stableford + prize calculation logic.
	‚Ä¢	Export services (CSV, PDF).
	‚Ä¢	Full-stack integration: Ensure smooth data flow and correct API connections.

Phase 4: Quality Assurance ‚úÖ
	‚Ä¢	Verify scoring accuracy with test datasets.
	‚Ä¢	Test handicap category splitting.
	‚Ä¢	Check 4K presentation screen readability.
	‚Ä¢	Validate CSV and PDF export formatting.
	‚Ä¢	Pause to ask PM for clarifications before continuing.

Phase 5: PM Sign-Off üèÅ
	‚Ä¢	Review completed features against requirements.
	‚Ä¢	Approve or request adjustments before moving forward.

‚∏ª

üö¶ Instructions for Vibe Coding
	‚Ä¢	Always simulate roles separately (PM ‚Üí UX ‚Üí Dev ‚Üí QA ‚Üí PM).
	‚Ä¢	After QA, stop, test, and ask clarifying questions before next iteration.
	‚Ä¢	Continue until all requirements are met, then deliver a final sign-off version.


Very important :  Do not fuckin change anything I did not ask for Just do only what I fuckin told you